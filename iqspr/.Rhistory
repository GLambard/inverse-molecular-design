colnames(dpred) <- c("E","HOMOLUMOgap")
predinit <- (t(qsprpred_env$qspr_predict("c1ccccc1O")[[1]]))
colnames(predinit) <- c("E","HOMOLUMOgap")
ggplot(data = dt, aes(x = E, y = HOMOLUMOgap)) + geom_point(size=0.4, color="black") +
annotate("rect", xmin=100, xmax=200, ymin=1, ymax=2, alpha=0.2, color="blue", fill="blue") +
geom_point(data = dpred, aes(x = E, y = HOMOLUMOgap), size=0.4, color="red") +
geom_point(data = data.frame(predinit), aes(x = E, y = HOMOLUMOgap), size=4, color="green", shape=3) +
labs(x="E", y="HOMO-LUMO gap", title="Initial dataset") + ylim(c(0,max(prop[,2]))) + xlim(c(0,max(prop[,1]))) +
theme(plot.title = element_text(hjust = 0.5))
data("engram_5k")
smchem <- SmcChem$new(smis = rep("c1ccccc1O", 100), v_qsprpred = qsprpred_env, v_engram = engram_5k, v_temp=c(30,3))
for(i in 1:50){
smchem$smcexec(niter = 2, nsteps = 7, preorder = 0.2)
}
gensmis <- smchem$get_hiscores(nsmi=2000, exsim=1)
head(gensmis)
pred <- qsprpred_env$qspr_predict(gensmis[,1])
predmat <- t(pred[[1]])
dpred <- data.frame(predmat)
colnames(dpred) <- c("E","HOMOLUMOgap")
predinit <- (t(qsprpred_env$qspr_predict("c1ccccc1O")[[1]]))
colnames(predinit) <- c("E","HOMOLUMOgap")
ggplot(data = dt, aes(x = E, y = HOMOLUMOgap)) + geom_point(size=0.4, color="black") +
annotate("rect", xmin=100, xmax=200, ymin=1, ymax=2, alpha=0.2, color="blue", fill="blue") +
geom_point(data = dpred, aes(x = E, y = HOMOLUMOgap), size=0.4, color="red") +
geom_point(data = data.frame(predinit), aes(x = E, y = HOMOLUMOgap), size=4, color="green", shape=3) +
labs(x="E", y="HOMO-LUMO gap", title="Initial dataset") + ylim(c(0,max(prop[,2]))) + xlim(c(0,max(prop[,1]))) +
theme(plot.title = element_text(hjust = 0.5))
targ.min <- c(100,0)
targ.max <- c(200,5)
qsprpred_env$set_target(targ.min,targ.max)
data("engram_5k")
smchem <- SmcChem$new(smis = rep("c1ccccc1O", 100), v_qsprpred = qsprpred_env, v_engram = engram_5k, v_temp=c(30,3))
for(i in 1:200){
smchem$smcexec(niter = 2, nsteps = 7, preorder = 0.2)
}
gensmis <- smchem$get_hiscores(nsmi=2000, exsim=1)
head(gensmis)
pred <- qsprpred_env$qspr_predict(gensmis[,1])
predmat <- t(pred[[1]])
dpred <- data.frame(predmat)
colnames(dpred) <- c("E","HOMOLUMOgap")
predinit <- (t(qsprpred_env$qspr_predict("c1ccccc1O")[[1]]))
colnames(predinit) <- c("E","HOMOLUMOgap")
ggplot(data = dt, aes(x = E, y = HOMOLUMOgap)) + geom_point(size=0.4, color="black") +
annotate("rect", xmin=100, xmax=200, ymin=1, ymax=2, alpha=0.2, color="blue", fill="blue") +
geom_point(data = dpred, aes(x = E, y = HOMOLUMOgap), size=0.4, color="red") +
geom_point(data = data.frame(predinit), aes(x = E, y = HOMOLUMOgap), size=4, color="green", shape=3) +
labs(x="E", y="HOMO-LUMO gap", title="Initial dataset") + ylim(c(0,max(prop[,2]))) + xlim(c(0,max(prop[,1]))) +
theme(plot.title = element_text(hjust = 0.5))
targ.min <- c(100,0)
targ.max <- c(200,4)
qsprpred_env$set_target(targ.min,targ.max)
data("engram_5k")
smchem <- SmcChem$new(smis = rep("c1ccccc1O", 100), v_qsprpred = qsprpred_env, v_engram = engram_5k, v_temp=c(30,3))
targ.min <- c(50,0)
targ.max <- c(250,4)
qsprpred_env$set_target(targ.min,targ.max)
data("engram_5k")
smchem <- SmcChem$new(smis = rep("c1ccccc1O", 100), v_qsprpred = qsprpred_env, v_engram = engram_5k, v_temp=c(30,3))
length(smchem$predytrack)
length(smchem$predystock)
dim(smchem$predystock)
dim(smchem$predystock[[1]])
length(smchem$predystock[[1]])
class(smchem$predystock)
smchem$predytrack
smchem$predystock
for(i in 1:200){
smchem$smcexec(niter = 2, nsteps = 7, preorder = 0.2)
}
gensmis <- smchem$get_hiscores(nsmi=2000, exsim=0.9)
head(gensmis)
pred <- qsprpred_env$qspr_predict(gensmis[,1])
predmat <- t(pred[[1]])
dpred <- data.frame(predmat)
colnames(dpred) <- c("E","HOMOLUMOgap")
predinit <- (t(qsprpred_env$qspr_predict("c1ccccc1O")[[1]]))
colnames(predinit) <- c("E","HOMOLUMOgap")
ggplot(data = dt, aes(x = E, y = HOMOLUMOgap)) + geom_point(size=0.4, color="black") +
annotate("rect", xmin=100, xmax=200, ymin=1, ymax=2, alpha=0.2, color="blue", fill="blue") +
geom_point(data = dpred, aes(x = E, y = HOMOLUMOgap), size=0.4, color="red") +
geom_point(data = data.frame(predinit), aes(x = E, y = HOMOLUMOgap), size=4, color="green", shape=3) +
labs(x="E", y="HOMO-LUMO gap", title="Initial dataset") + ylim(c(0,max(prop[,2]))) + xlim(c(0,max(prop[,1]))) +
theme(plot.title = element_text(hjust = 0.5))
smchem$predytrack
smchem$predystock
mols_mw <- parse.smiles(gensmis[,1],kekulise=F)
mols_op <- lapply(mols_mw,do.aromaticity)
mols_op <- lapply(mols_mw,do.typing)
mols_op <- lapply(mols_mw,do.isotopes)
gensmis_mw <- unlist(lapply(mols,get.exact.mass))
gensmis_mw <- unlist(lapply(mols_mw,get.exact.mass))
gensmis_mw
data.frame(gensmis[,1],gensmis_mw)
newmols.dataframe <- data.frame(gensmis[,1],gensmis_mw)
colnames(newmols.dataframe) <- c("SMILES","MW")
predmat[1,]
newmols.dataframe <- data.frame(gensmis[,1],predmat[,2],gensmis_mw)
colnames(newmols.dataframe) <- c("SMILES","HMgap",MW")
)
<-
exit
colnames(newmols.dataframe) <- c("SMILES","HMgap","MW")
newmols.dataframe[1,]
rownames(newmols.dataframe) <- c(1:dim(newmols.dataframe)[1])
newmols.dataframe[1,]
mols_mw <- parse.smiles(smis,kekulise=F)
mols_op <- lapply(mols_mw,do.aromaticity)
mols_op <- lapply(mols_mw,do.typing)
mols_op <- lapply(mols_mw,do.isotopes)
rm(mols_op)
qspr.data.mw <- unlist(lapply(mols_mw,get.exact.mass))
mols.dataframe <- data.frame(smis,qspr.data[,3],qspr.data.mw)
colnames(mols.dataframe) <- c("SMILES","HMgap","MW")
rownames(mols.dataframe) <- c(1:dim(mols.dataframe)[1])
mols.dataframe[1,]
save(mols.dataframe,file="qspr.data.crest.Rda")
save(newmols.dataframe,file="newmols.crest.Rda")
getwd()
load("./qspr.data.crest.Rda")
qspr.data[1,]
dt[1,]
qspr.data.mw[1,]
class(qspr.data.mw)
qspr.data.mw[1:10]
mol_mw <- parse.smiles("CC", kekulise = T)
lapply(mols_mw,get.exact.mass)
lapply(mol_mw,get.exact.mass)
class(mols_mw)
mols_mw[1]
as.numeric(lapply(mols_mw,get.exact.mass))
qspr.data[1,]
summary(as.numeric(lapply(mols_mw,get.exact.mass)))
length(c())
mw <- lapply(mol_mw,get.exact.mass)
mw <- lapply(mols_mw,get.exact.mass)
mw <- as.numeric(lapply(mols_mw,get.exact.mass))
t(t(mw[1:10])>c(100)&t(mw[1:10])<c(200))
class(t(t(mw[1:10])>c(100)&t(mw[1:10])<c(200)))
as.datamatrix(t(t(mw[1:10])>c(100)&t(mw[1:10])<c(200)))
as.numeric(t(t(mw[1:10])>c(100)&t(mw[1:10])<c(200)))
t(as.numeric(t(t(mw[1:10])>c(100)&t(mw[1:10])<c(200))))
t(as.numeric(t(t(mw[1:2])>c(100)&t(mw[1:2])<c(200))))
c(1,1)*t(as.numeric(t(t(mw[1:2])>c(100)&t(mw[1:2])<c(200))))
c(1,1)*as.numeric(t(t(mw[1:2])>c(100)&t(mw[1:2])<c(200)))
rep(1,10)
class(rep(1,10))
library(iqspr)
c(1,2)*c(3,2)
c(1,2) * c(0,1)
library(iqspr)
class(mw)
length(mw)
class(qspr.data)
mw.data <- data.frame(qspr.data[,-2])
mw.data[1,]
mw.data <- data.frame(qspr.data[,-2],mw)
mw.data[1,]
mw.data <- data.frame(qspr.data[,1],mw,qspr.data[,3])
mw.data[1,]
smis <- as.character(mw.data[,1])
prop <- as.matrix(mw.data[,c(2,3)])
trainidx <- sample(1:nrow(mw.data), 5000)
dt <- data.frame(prop)
colnames(dt) <- c("MW","HOMOLUMOgap")
ggplot(data = dt, aes(x = MW, y = HOMOLUMOgap)) + geom_point(size=0.4, color="black") +
labs(x="MW", y="HOMO-LUMO gap", title="Initial dataset") + ylim(c(0,max(prop[,2]))) + xlim(c(0,max(prop[,1]))) +
theme(plot.title = element_text(hjust = 0.5))
cut <- c(1:9000)
smis1 <- smis[cut]
smis2 <- smis[-cut]
prop1 <- prop[cut,"MW"]
prop2 <- prop[-cut,"HOMO-LUMO gap"]
smis_l <- length(smis)
trainidx <- sample(1:smis_l, 0.9*smis_l)
qsprpred_env <- QSPRpred()
qsprpred_env$init_env(smis=smis[trainidx], prop=prop[trainidx], v_fnames=c("standard","extended","circular"))
qsprpred_env$init_env(smis=smis[trainidx], prop=prop[trainidx], v_fnames=c("standard","extended","circular"))
library(iqspr)
qsprpred_env <- QSPRpred()
qsprpred_env$init_env(smis=smis[trainidx], prop=prop[trainidx], v_fnames=c("standard","extended","circular"))
length(numeric(0))
class(numeric(0))
class(c(0))
class(c())
library(iqspr)
qsprpred_env <- QSPRpred()
qsprpred_env$init_env(smis=smis[trainidx], prop=prop[trainidx], v_fnames=c("standard","extended","circular"))
qsprpred_env <- QSPRpred()
qsprpred_env$init_env(smis=smis[trainidx], prop=prop[trainidx], v_fnames=c("standard","extended","circular"), v_filterfunc = function(), v_filtermin = c(100), v_filtermax = c(200))
filterfunc <- function()
;
filterfunc <- function(){}
rm(filterfunc)
qsprpred_env$init_env(smis=smis[trainidx], prop=prop[trainidx], v_fnames=c("standard","extended","circular"), v_filterfunc = function(){}, v_filtermin = c(100), v_filtermax = c(200))
qsprpred_env$model_training(model=c("linear_Bayes"),params=NA)
predictions <- qsprpred_env$qspr_predict(smis[-trainidx])
d <- data.frame(predictions[[1]][1,],prop[-trainidx],sqrt(predictions[[2]][1,]))
colnames(d) <- c("pred","prop","sd")
dim(predictions)
length(predictions)
length(smis[-trainidx])
predictions <- qsprpred_env$qspr_predict(smis[-trainidx])
class(predictions)
rownames(predictions[[1]]) <- c("MW","HOMO-LUMO gap")
rownames(predictions[[1]]) <- c("HOMO-LUMO gap")
predictions[[1]][,1:4] # predictions
smis <- as.character(mw.data[,1])
prop <- as.matrix(mw.data[,3])
smis <- as.character(qspr.data[,1])
prop <- as.matrix(qspr.data[,c(2,3)])
trainidx <- sample(1:nrow(mw.data), 5000)
dt <- data.frame(prop)
colnames(dt) <- c("MW","HOMOLUMOgap")
ggplot(data = dt, aes(x = MW, y = HOMOLUMOgap)) + geom_point(size=0.4, color="black") +
labs(x="MW", y="HOMO-LUMO gap", title="Initial dataset") + ylim(c(0,max(prop[,2]))) + xlim(c(0,max(prop[,1]))) +
theme(plot.title = element_text(hjust = 0.5))
smis <- as.character(mw.data[,1])
prop <- as.matrix(mw.data[,c(2,3)])
trainidx <- sample(1:nrow(mw.data), 5000)
dt <- data.frame(prop)
colnames(dt) <- c("MW","HOMOLUMOgap")
ggplot(data = dt, aes(x = MW, y = HOMOLUMOgap)) + geom_point(size=0.4, color="black") +
labs(x="MW", y="HOMO-LUMO gap", title="Initial dataset") + ylim(c(0,max(prop[,2]))) + xlim(c(0,max(prop[,1]))) +
theme(plot.title = element_text(hjust = 0.5))
smis_l <- length(smis)
trainidx <- sample(1:smis_l, 0.9*smis_l)
qsprpred_env <- QSPRpred()
qsprpred_env$init_env(smis=smis1[trainidx], prop=prop[trainidx,2], v_fnames=c("standard","extended","circular"))
qsprpred_env$model_training(model=c("linear_Bayes"),params=NA)
predictions <- qsprpred_env$qspr_predict(smis[-trainidx])
d1 <- data.frame(predictions[[1]][1,],prop[-trainidx],sqrt(predictions[[2]][1,]))
colnames(d1) <- c("pred","prop","sd")
dim(predictions[[1]])
length(prop[-trainidx])
length(trainidx)
length(prop)
d1 <- data.frame(predictions[[1]][1,],prop[-trainidx,2],sqrt(predictions[[2]][1,]))
colnames(d1) <- c("pred","prop","sd")
prd.obs.rmse1 <- round(sqrt(sum((predictions[[1]][1,] - prop[-trainidx,2])^2) / (0.1*smis_l)),digits = 1)
prd.obs.corr1 <- round(cor(predictions[[1]][1,],prop[-trainidx,2]),digits = 2)
minmaxx <- c(min(d1[,1]),max(d1[,1]))
minmaxy <- c(min(d1[,2]),max(d1[,2]))
p1 <- ggplot(data = d1, aes(x = pred, y = prop, size=sd)) + geom_point(color="cyan3") + geom_point(shape=1, alpha=0.4) +
labs(x="predictions", y="observations", title="HMgap") + ylim(minmaxy) + xlim(minmaxx) +
guides(size=guide_legend(title="s.d.")) +
geom_abline(intercept = 0, slope = 1, color = "red", size = 1, alpha = 0.5) +
annotate("text", x = c(50,50), y = c(500,530), label = c(paste("RMSE:",prd.obs.rmse1), paste("COR:",prd.obs.corr1)) , color="black", size=3, angle=0, fontface="bold") +
theme(plot.title = element_text(hjust = 0.5))
p1
targ.min <- c(1)
targ.max <- c(2)
qsprpred_env$set_target(targ.min,targ.max)
data("engram_5k")
smchem <- SmcChem$new(smis = rep("c1ccccc1O", 100), v_qsprpred = qsprpred_env, v_engram = engram_5k, v_temp=c(3))
for(i in 1:200){
smchem$smcexec(niter = 2, nsteps = 7, preorder = 0.2)
}
smchem <- SmcChem$new(smis = rep("c1ccccc1O", 100), v_qsprpred = qsprpred_env, v_engram = engram_5k, v_temp=c(3,3))
smchem <- SmcChem$new(smis = rep("c1ccccc1O", 100), v_qsprpred = qsprpred_env, v_engram = engram_5k, v_temp=as.matrix(c(3)))
for(i in 1:200){
smchem$smcexec(niter = 2, nsteps = 7, preorder = 0.2)
}
dim(as.matrix(c(1,1)))[2]
dim(as.matrix(c(1)))[2]
smchem <- SmcChem$new(smis = rep("c1ccccc1O", 100), v_qsprpred = qsprpred_env, v_engram = engram_5k, v_temp=as.matrix(c(3)))
for(i in 1:200){
smchem$smcexec(niter = 2, nsteps = 7, preorder = 0.2)
}
smchem <- SmcChem$new(smis = rep("c1ccccc1O", 100), v_qsprpred = qsprpred_env, v_engram = engram_5k, v_temp=c(3))
smis_l <- length(smis)
trainidx <- sample(1:smis_l, 0.9*smis_l)
qsprpred_env <- QSPRpred()
qsprpred_env$init_env(smis=smis1[trainidx], prop=prop[trainidx,2], v_fnames=c("standard","extended","circular"))
qsprpred_env$model_training(model=c("linear_Bayes"),params=NA)
targ.min <- c(1)
targ.max <- c(2)
qsprpred_env$set_target(targ.min,targ.max)
data("engram_5k")
smchem <- SmcChem$new(smis = rep("c1ccccc1O", 100), v_qsprpred = qsprpred_env, v_engram = engram_5k, v_temp=c(3))
smis_l <- length(smis)
trainidx <- sample(1:smis_l, 0.9*smis_l)
qsprpred_env <- QSPRpred()
qsprpred_env$init_env(smis=smis1[trainidx], prop=prop[trainidx,2], v_fnames=c("standard","extended","circular"))
qsprpred_env$model_training(model=c("linear_Bayes"),params=NA)
targ.min <- c(1)
targ.max <- c(2)
qsprpred_env$set_target(targ.min,targ.max)
smchem <- SmcChem$new(smis = rep("c1ccccc1O", 100), v_qsprpred = qsprpred_env, v_engram = engram_5k, v_temp=c(3))
smis_l <- length(smis)
trainidx <- sample(1:smis_l, 0.9*smis_l)
qsprpred_env <- QSPRpred()
qsprpred_env$init_env(smis=smis1[trainidx], prop=prop[trainidx,2], v_fnames=c("standard","extended","circular"))
qsprpred_env$model_training(model=c("linear_Bayes"),params=NA)
targ.min <- c(1)
targ.max <- c(2)
qsprpred_env$set_target(targ.min,targ.max)
smchem <- SmcChem$new(smis = rep("c1ccccc1O", 100), v_qsprpred = qsprpred_env, v_engram = engram_5k, v_temp=c(3))
for(i in 1:200){
smchem$smcexec(niter = 2, nsteps = 7, preorder = 0.2)
}
gensmis <- smchem$get_hiscores(nsmi=2000, exsim=0.9)
head(gensmis)
gensmis <- smchem$get_hiscores(nsmi=2000, exsim=0.95)
head(gensmis)
gensmis <- smchem$get_hiscores(nsmi=2000, exsim=0.99)
head(gensmis)
mols <- parse.smiles(gensmis[,1],kekulise=F)
mw <- as.numeric(lapply(mols,get.exact.mass))
class(gensmis[,1])
gensmis[,1]
mw <- as.numeric(lapply(mols,get.exact.mass))
mols <- parse.smiles(gensmis[,1],kekulise=F)
lapply(mols,do.aromaticity)
lapply(mols,do.isotopes)
lapply(mols,do.typing)
mw <- as.numeric(lapply(mols,get.exact.mass))
pred <- qsprpred_env$qspr_predict(gensmis[,1])
predmat <- t(pred[[1]])
predmat
dpred <- data.frame(mw,predmat)
dpred[1,]
colnames(dpred) <- c("MW","HOMOLUMOgap")
ggplot(data = dt, aes(x = MW, y = HOMOLUMOgap)) + geom_point(size=0.4, color="black") +
annotate("rect", xmin=100, xmax=200, ymin=1, ymax=2, alpha=0.2, color="blue", fill="blue") +
geom_point(data = dpred, aes(x = MW, y = HOMOLUMOgap), size=0.4, color="red") +
labs(x="MW", y="HOMO-LUMO gap") + ylim(c(0,max(prop[,2]))) + xlim(c(0,max(prop[,1]))) +
theme(plot.title = element_text(hjust = 0.5))
smis_l <- length(smis)
trainidx <- sample(1:smis_l, 0.9*smis_l)
qsprpred_env <- QSPRpred()
qsprpred_env$init_env(smis=smis1[trainidx], prop=prop[trainidx,2], v_fnames=c("standard","extended","circular"), v_filterfunc = function(){}, v_filtermin = c(200), v_filtermax = c(300))
qsprpred_env$model_training(model=c("linear_Bayes"),params=NA)
targ.min <- c(1)
targ.max <- c(2)
qsprpred_env$set_target(targ.min,targ.max)
smchem <- SmcChem$new(smis = rep("c1ccccc1O", 100), v_qsprpred = qsprpred_env, v_engram = engram_5k, v_temp=c(3))
smis_l <- length(smis)
trainidx <- sample(1:smis_l, 0.9*smis_l)
qsprpred_env <- QSPRpred()
qsprpred_env$init_env(smis=smis1[trainidx], prop=prop[trainidx,2], v_fnames=c("standard","extended","circular"), v_filterfunc = function(){}, v_filtermin = c(200), v_filtermax = c(300))
qsprpred_env$model_training(model=c("linear_Bayes"),params=NA)
targ.min <- c(1)
targ.max <- c(2)
qsprpred_env$set_target(targ.min,targ.max)
smchem <- SmcChem$new(smis = rep("c1ccccc1O", 100), v_qsprpred = qsprpred_env, v_engram = engram_5k, v_temp=c(3))
for(i in 1:200){
smchem$smcexec(niter = 2, nsteps = 7, preorder = 0.2)
}
library(iqspr)
smis_l <- length(smis)
trainidx <- sample(1:smis_l, 0.9*smis_l)
qsprpred_env <- QSPRpred()
qsprpred_env$init_env(smis=smis1[trainidx], prop=prop[trainidx,2], v_fnames=c("standard","extended","circular"), v_filterfunc = function(){}, v_filtermin = c(200), v_filtermax = c(300))
qsprpred_env$model_training(model=c("linear_Bayes"),params=NA)
targ.min <- c(1)
targ.max <- c(2)
qsprpred_env$set_target(targ.min,targ.max)
smchem <- SmcChem$new(smis = rep("c1ccccc1O", 100), v_qsprpred = qsprpred_env, v_engram = engram_5k, v_temp=c(3))
for(i in 1:200){
smchem$smcexec(niter = 2, nsteps = 7, preorder = 0.2)
}
library(iqspr)
smis_l <- length(smis)
trainidx <- sample(1:smis_l, 0.9*smis_l)
qsprpred_env <- QSPRpred()
qsprpred_env$init_env(smis=smis1[trainidx], prop=prop[trainidx,2], v_fnames=c("standard","extended","circular"), v_filterfunc = function(){}, v_filtermin = c(200), v_filtermax = c(300))
qsprpred_env$model_training(model=c("linear_Bayes"),params=NA)
targ.min <- c(1)
targ.max <- c(2)
qsprpred_env$set_target(targ.min,targ.max)
length(which(t(t(prop[,1])>filtermin&t(prop[,1])<filtermax)==T))
length(which(t(t(prop[,1])>c(200)&t(prop[,1])<c(300))==T))
smis_veto <- which(t(t(prop[,1])>c(200)&t(prop[,1])<c(300))==T)
smistartidx <- sample(1:length(smis_veto),100)
smchem <- SmcChem$new(smis = smis[smis_veto[smistartidx]], v_qsprpred = qsprpred_env, v_engram = engram_5k, v_temp=c(3))
for(i in 1:200){
smchem$smcexec(niter = 2, nsteps = 7, preorder = 0.2)
}
gensmis <- smchem$get_hiscores(nsmi=2000, exsim=0.99)
head(gensmis)
pred <- qsprpred_env$qspr_predict(gensmis[,1])
predmat <- t(pred[[1]])
mols <- parse.smiles(gensmis[,1],kekulise=F)
lapply(mols,do.aromaticity)
lapply(mols,do.isotopes)
lapply(mols,do.typing)
mw <- as.numeric(lapply(mols,get.exact.mass))
dpred <- data.frame(mw,predmat)
colnames(dpred) <- c("MW","HOMOLUMOgap")
ggplot(data = dt, aes(x = MW, y = HOMOLUMOgap)) + geom_point(size=0.4, color="black") +
annotate("rect", xmin=100, xmax=200, ymin=1, ymax=2, alpha=0.2, color="blue", fill="blue") +
geom_point(data = dpred, aes(x = MW, y = HOMOLUMOgap), size=0.4, color="red") +
labs(x="MW", y="HOMO-LUMO gap") + ylim(c(0,max(prop[,2]))) + xlim(c(0,max(prop[,1]))) +
theme(plot.title = element_text(hjust = 0.5))
smis_l <- length(smis)
trainidx <- sample(1:smis_l, 0.9*smis_l)
qsprpred_env <- QSPRpred()
qsprpred_env$init_env(smis=smis1[trainidx], prop=prop[trainidx,2], v_fnames=c("standard","extended","circular"))
smis_l <- length(smis)
trainidx <- sample(1:smis_l, 0.9*smis_l)
qsprpred_env <- QSPRpred()
qsprpred_env$init_env(smis=smis1[trainidx], prop=prop[trainidx,2], v_fnames=c("standard","extended","circular"), kekulise = T)
smis_l <- length(smis)
trainidx <- sample(1:smis_l, 0.9*smis_l)
qsprpred_env <- QSPRpred()
qsprpred_env$init_env(smis=smis[trainidx], prop=prop[trainidx,2], v_fnames=c("standard","extended","circular"), kekulise = F)
smis_l <- length(smis)
trainidx <- sample(1:smis_l, 0.9*smis_l)
qsprpred_env <- QSPRpred()
qsprpred_env$init_env(smis=smis[trainidx], prop=prop[trainidx,2], v_fnames=c("standard","extended","circular"))
library(devtools)
install_github("rajarshi/cdkr", subdir="rcdklibs")
install_github("rajarshi/cdkr", subdir="rcdk")
library(rcdk)
get.desc.categories()
get.desc.names()
library(iqspr)
library(iqspr, quietly = T, warn.conflicts = F)
library(ggplot2)
library(gridExtra) # for multiple plots on a page
data("qspr.data")
dim(qspr.data)
head(qspr.data)
smis <- as.character(qspr.data[,1])
prop <- as.matrix(qspr.data[,c(2,3)])
trainidx <- sample(1:nrow(qspr.data), 5000)
testidx <- sample((1:nrow(qspr.data))[-trainidx], 1000)
dt <- data.frame(prop)
colnames(dt) <- c("E","HOMOLUMOgap")
ggplot(data = dt, aes(x = E, y = HOMOLUMOgap)) + geom_point(size=0.4, color="black") +
labs(x="E", y="HOMO-LUMO gap", title="Initial dataset") + ylim(c(0,max(prop[,2]))) + xlim(c(0,max(prop[,1]))) +
theme(plot.title = element_text(hjust = 0.5))
cut <- c(1:9000)
smis1 <- smis[cut]
smis2 <- smis[-cut]
prop1 <- prop[cut,"E"]
prop2 <- prop[-cut,"HOMO-LUMO gap"]
smis1_l <- length(smis1)
smis2_l <- length(smis2)
trainidx1 <- sample(1:smis1_l, 0.9*smis1_l)
trainidx2 <- sample(1:smis2_l, 0.9*smis2_l)
qsprpred_env <- QSPRpred()
qsprpred_env$init_env(smis=list(smis1[trainidx1],smis2[trainidx2]), prop=list(prop1[trainidx1],prop2[trainidx2]), v_fnames=c("standard","extended","circular"))
library(fingerprint)
smis1_l <- length(smis1)
smis2_l <- length(smis2)
trainidx1 <- sample(1:smis1_l, 0.9*smis1_l)
trainidx2 <- sample(1:smis2_l, 0.9*smis2_l)
qsprpred_env <- QSPRpred()
qsprpred_env$init_env(smis=list(smis1[trainidx1],smis2[trainidx2]), prop=list(prop1[trainidx1],prop2[trainidx2]), v_fnames=c("standard","extended","circular"))
#qsprpred_env$init_env(smis=list(smis1[trainidx1],smis2[trainidx2]), prop=list(prop1[trainidx1],prop2[trainidx2]), #v_fnames=c("standard"))
getwd()
pubchemqc_data <- read.delim("../RStudio/Workspace/Low_gap_Project/data/database/dft_pubchem_smiles_nocc_hm_lm_gapgt0_noionisotopisomer.txt",header = F, sep = " ", col.names = c("SMILES","numoccorbitals","homo","lumo","gap"))
dim(pubchemqc_data)
pubchemqc_data[1,]
smis <- as.character(pubchemqc_data[,1])
prop <- as.matrix(pubchemqc_data[,"gap"])
dt <- data.frame(prop)
dt[1,]
colnames(dt) <- c("HOMOLUMOgap")
library(iqspr, quietly = T, warn.conflicts = F)
library(ggplot2)
library(gridExtra) # for multiple plots on a page
mols <- parse.smiles(smis, kekulise = F)
pubchemqc_data <- pubchemqc_data[sample(1:dim(pubchemqc_data)[1],20000),]
smis <- as.character(pubchemqc_data[,1])
mols <- parse.smiles(smis, kekulise = T)
library(iqspr, quietly = T, warn.conflicts = F)
library(ggplot2)
library(gridExtra) # for multiple plots on a page
mols <- parse.smiles(smis, kekulise = T)
library(iqspr, quietly = T, warn.conflicts = F)
library(ggplot2)
library(gridExtra) # for multiple plots on a page
pubchemqc_data <- read.delim("../RStudio/Workspace/Low_gap_Project/data/database/dft_pubchem_smiles_nocc_hm_lm_gapgt0_noionisotopisomer.txt",header = F, sep = " ", col.names = c("SMILES","numoccorbitals","homo","lumo","gap"))
pubchemqc_data <- pubchemqc_data[sample(1:dim(pubchemqc_data)[1],20000),]
smis <- as.character(pubchemqc_data[,1])
mols <- parse.smiles(smis, kekulise = T)
mw <- as.numeric(lapply(mols,get.exact.mass))
do.aromaticity(mols)
nullout <- lapply(mols,do.aromaticity)
nullout <- lapply(mols,do.aromaticity())
nullout <- lapply(mols,do.aromaticity)
mols <- parse.smiles(smis, kekulise = F)
nullout <- lapply(mols,do.aromaticity)
nullout <- lapply(mols,do.isotopes)
nullout <- lapply(mols,do.typing)
mw <- as.numeric(lapply(mols,get.exact.mass))
prop <- as.matrix(pubchemqc_data[,"gap"])
dt <- data.frame(prop,mw)
dt[1,]
colnames(dt) <- c("hmgap","mw")
ggplot(data = dt, aes(x = mw, y = hmgap)) + geom_point(size=0.4, color="black") +
labs(x="Molecular Weight (g/mol)", y="HOMO-LUMO gap (eV)", title="Initial dataset") + ylim(c(0,max(prop[,2]))) + xlim(c(0,max(prop[,1]))) +
theme(plot.title = element_text(hjust = 0.5))
ggplot(data = dt, aes(x = mw, y = hmgap)) + geom_point(size=0.4, color="black") +
labs(x="Molecular Weight (g/mol)", y="HOMO-LUMO gap (eV)", title="Initial dataset") + ylim(c(0,max(mw))) + xlim(c(0,max(prop[,1]))) +
theme(plot.title = element_text(hjust = 0.5))
dt[1,]
ggplot(data = dt, aes(x = mw, y = hmgap)) + geom_point(size=0.4, color="black") +
labs(x="Molecular Weight (g/mol)", y="HOMO-LUMO gap (eV)", title="Initial dataset") + ylim(c(0,max(prop[,1]))) + xlim(c(0,max(mw))) +
theme(plot.title = element_text(hjust = 0.5))
qsprpred_env <- QSPRpred()
qsprpred_env$init_env(smis=smis, prop=prop, v_fnames=c("standard","extended","circular"))
library(fingerprint)
qsprpred_env <- QSPRpred()
qsprpred_env$init_env(smis=smis, prop=prop, v_fnames=c("standard","extended","circular"))
qsprpred_env$init_env(smis=smis, prop=prop, v_fnames=c("standard","extended","circular"), kekulise = F)
qsprpred_env <- QSPRpred()
qsprpred_env$init_env(smis=smis, prop=prop, v_fnames=c("standard","extended","circular"), kekulise = F)
